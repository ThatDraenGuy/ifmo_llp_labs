/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DATABASE_SERVICE_H
#define DATABASE_SERVICE_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "service_types.h"

/* DatabaseService service interface */
typedef struct _DatabaseServiceIf DatabaseServiceIf; /* dummy object */

struct _DatabaseServiceIfInterface {
  GTypeInterface parent;

  gboolean (*execute)(DatabaseServiceIf *iface, StatementResult **_return,
                      const Statement *stmt, Error **err, GError **error);
};
typedef struct _DatabaseServiceIfInterface DatabaseServiceIfInterface;

GType database_service_if_get_type(void);
#define TYPE_DATABASE_SERVICE_IF (database_service_if_get_type())
#define DATABASE_SERVICE_IF(obj)                                               \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_DATABASE_SERVICE_IF,                 \
                              DatabaseServiceIf))
#define IS_DATABASE_SERVICE_IF(obj)                                            \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_DATABASE_SERVICE_IF))
#define DATABASE_SERVICE_IF_GET_INTERFACE(inst)                                \
  (G_TYPE_INSTANCE_GET_INTERFACE((inst), TYPE_DATABASE_SERVICE_IF,             \
                                 DatabaseServiceIfInterface))

gboolean database_service_if_execute(DatabaseServiceIf *iface,
                                     StatementResult **_return,
                                     const Statement *stmt, Error **err,
                                     GError **error);

/* DatabaseService service client */
struct _DatabaseServiceClient {
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _DatabaseServiceClient DatabaseServiceClient;

struct _DatabaseServiceClientClass {
  GObjectClass parent;
};
typedef struct _DatabaseServiceClientClass DatabaseServiceClientClass;

GType database_service_client_get_type(void);
#define TYPE_DATABASE_SERVICE_CLIENT (database_service_client_get_type())
#define DATABASE_SERVICE_CLIENT(obj)                                           \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_DATABASE_SERVICE_CLIENT,             \
                              DatabaseServiceClient))
#define DATABASE_SERVICE_CLIENT_CLASS(c)                                       \
  (G_TYPE_CHECK_CLASS_CAST((c), TYPE_DATABASE_SERVICE_CLIENT,                  \
                           DatabaseServiceClientClass))
#define DATABASE_SERVICE_IS_CLIENT(obj)                                        \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_DATABASE_SERVICE_CLIENT))
#define DATABASE_SERVICE_IS_CLIENT_CLASS(c)                                    \
  (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_DATABASE_SERVICE_CLIENT))
#define DATABASE_SERVICE_CLIENT_GET_CLASS(obj)                                 \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_DATABASE_SERVICE_CLIENT,              \
                             DatabaseServiceClientClass))

gboolean database_service_client_execute(DatabaseServiceIf *iface,
                                         StatementResult **_return,
                                         const Statement *stmt, Error **err,
                                         GError **error);
gboolean database_service_client_send_execute(DatabaseServiceIf *iface,
                                              const Statement *stmt,
                                              GError **error);
gboolean database_service_client_recv_execute(DatabaseServiceIf *iface,
                                              StatementResult **_return,
                                              Error **err, GError **error);
void database_service_client_set_property(GObject *object, guint property_id,
                                          const GValue *value,
                                          GParamSpec *pspec);
void database_service_client_get_property(GObject *object, guint property_id,
                                          GValue *value, GParamSpec *pspec);

/* DatabaseService handler (abstract base class) */
struct _DatabaseServiceHandler {
  GObject parent;
};
typedef struct _DatabaseServiceHandler DatabaseServiceHandler;

struct _DatabaseServiceHandlerClass {
  GObjectClass parent;

  gboolean (*execute)(DatabaseServiceIf *iface, StatementResult **_return,
                      const Statement *stmt, Error **err, GError **error);
};
typedef struct _DatabaseServiceHandlerClass DatabaseServiceHandlerClass;

GType database_service_handler_get_type(void);
#define TYPE_DATABASE_SERVICE_HANDLER (database_service_handler_get_type())
#define DATABASE_SERVICE_HANDLER(obj)                                          \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_DATABASE_SERVICE_HANDLER,            \
                              DatabaseServiceHandler))
#define IS_DATABASE_SERVICE_HANDLER(obj)                                       \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_DATABASE_SERVICE_HANDLER))
#define DATABASE_SERVICE_HANDLER_CLASS(c)                                      \
  (G_TYPE_CHECK_CLASS_CAST((c), TYPE_DATABASE_SERVICE_HANDLER,                 \
                           DatabaseServiceHandlerClass))
#define IS_DATABASE_SERVICE_HANDLER_CLASS(c)                                   \
  (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_DATABASE_SERVICE_HANDLER))
#define DATABASE_SERVICE_HANDLER_GET_CLASS(obj)                                \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_DATABASE_SERVICE_HANDLER,             \
                             DatabaseServiceHandlerClass))

gboolean database_service_handler_execute(DatabaseServiceIf *iface,
                                          StatementResult **_return,
                                          const Statement *stmt, Error **err,
                                          GError **error);

/* DatabaseService processor */
struct _DatabaseServiceProcessor {
  ThriftDispatchProcessor parent;

  /* protected */
  DatabaseServiceHandler *handler;
  GHashTable *process_map;
};
typedef struct _DatabaseServiceProcessor DatabaseServiceProcessor;

struct _DatabaseServiceProcessorClass {
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call)(ThriftDispatchProcessor *processor,
                            ThriftProtocol *in, ThriftProtocol *out,
                            gchar *fname, gint32 seqid, GError **error);
};
typedef struct _DatabaseServiceProcessorClass DatabaseServiceProcessorClass;

GType database_service_processor_get_type(void);
#define TYPE_DATABASE_SERVICE_PROCESSOR (database_service_processor_get_type())
#define DATABASE_SERVICE_PROCESSOR(obj)                                        \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_DATABASE_SERVICE_PROCESSOR,          \
                              DatabaseServiceProcessor))
#define IS_DATABASE_SERVICE_PROCESSOR(obj)                                     \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_DATABASE_SERVICE_PROCESSOR))
#define DATABASE_SERVICE_PROCESSOR_CLASS(c)                                    \
  (G_TYPE_CHECK_CLASS_CAST((c), TYPE_DATABASE_SERVICE_PROCESSOR,               \
                           DatabaseServiceProcessorClass))
#define IS_DATABASE_SERVICE_PROCESSOR_CLASS(c)                                 \
  (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_DATABASE_SERVICE_PROCESSOR))
#define DATABASE_SERVICE_PROCESSOR_GET_CLASS(obj)                              \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_DATABASE_SERVICE_PROCESSOR,           \
                             DatabaseServiceProcessorClass))

#endif /* DATABASE_SERVICE_H */
