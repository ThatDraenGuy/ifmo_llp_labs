/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SERVICE_TYPES_H
#define SERVICE_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>
#include <thrift/c_glib/thrift_struct.h>
/* custom thrift includes */

/* begin types */

enum _ColumnType {
  COLUMN_TYPE_COLUMN_TYPE_INT32 = 0,
  COLUMN_TYPE_COLUMN_TYPE_UINT64 = 1,
  COLUMN_TYPE_COLUMN_TYPE_FLOAT = 2,
  COLUMN_TYPE_COLUMN_TYPE_STRING = 3,
  COLUMN_TYPE_COLUMN_TYPE_BOOL = 4
};
typedef enum _ColumnType ColumnType;

/* return the name of the constant */
const char *toString_ColumnType(int value);

enum _ArithmethicOperatorValue {
  ARITHMETHIC_OPERATOR_VALUE_PLUS = 0,
  ARITHMETHIC_OPERATOR_VALUE_MINUS = 1,
  ARITHMETHIC_OPERATOR_VALUE_MUL = 2,
  ARITHMETHIC_OPERATOR_VALUE_DIV = 3
};
typedef enum _ArithmethicOperatorValue ArithmethicOperatorValue;

/* return the name of the constant */
const char *toString_ArithmethicOperatorValue(int value);

enum _ComparisonOperatorValue {
  COMPARISON_OPERATOR_VALUE_EQ = 0,
  COMPARISON_OPERATOR_VALUE_NEQ = 1,
  COMPARISON_OPERATOR_VALUE_LESS = 2,
  COMPARISON_OPERATOR_VALUE_LEQ = 3,
  COMPARISON_OPERATOR_VALUE_GREATER = 4,
  COMPARISON_OPERATOR_VALUE_GEQ = 5
};
typedef enum _ComparisonOperatorValue ComparisonOperatorValue;

/* return the name of the constant */
const char *toString_ComparisonOperatorValue(int value);

enum _LogicalOperatorValue {
  LOGICAL_OPERATOR_VALUE_AND = 0,
  LOGICAL_OPERATOR_VALUE_OR = 1,
  LOGICAL_OPERATOR_VALUE_NOT = 2
};
typedef enum _LogicalOperatorValue LogicalOperatorValue;

/* return the name of the constant */
const char *toString_LogicalOperatorValue(int value);

struct _Error {
  ThriftStruct parent;

  /* public */
  gchar *errorSource;
  gboolean __isset_errorSource;
  gchar *errorType;
  gboolean __isset_errorType;
  gint64 errorCode;
  gboolean __isset_errorCode;
  gchar *errorMessage;
  gboolean __isset_errorMessage;
};
typedef struct _Error Error;

struct _ErrorClass {
  ThriftStructClass parent;
};
typedef struct _ErrorClass ErrorClass;

GType error_get_type(void);
#define TYPE_ERROR (error_get_type())
#define ERROR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_ERROR, Error))
#define ERROR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_ERROR, ErrorClass))
#define IS_ERROR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_ERROR))
#define IS_ERROR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_ERROR))
#define ERROR_GET_CLASS(obj)                                                   \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_ERROR, ErrorClass))

/* exception */
typedef enum { ERROR_ERROR_CODE } ErrorError;

GQuark error_error_quark(void);
#define ERROR_ERROR (error_error_quark())

/* struct ColumnValue */
struct _ColumnValue {
  ThriftStruct parent;

  /* public */
  gint32 i32_val;
  gboolean __isset_i32_val;
  gint64 u64_val;
  gboolean __isset_u64_val;
  gdouble float_val;
  gboolean __isset_float_val;
  gchar *string_val;
  gboolean __isset_string_val;
  gboolean bool_val;
  gboolean __isset_bool_val;
};
typedef struct _ColumnValue ColumnValue;

struct _ColumnValueClass {
  ThriftStructClass parent;
};
typedef struct _ColumnValueClass ColumnValueClass;

GType column_value_get_type(void);
#define TYPE_COLUMN_VALUE (column_value_get_type())
#define COLUMN_VALUE(obj)                                                      \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_COLUMN_VALUE, ColumnValue))
#define COLUMN_VALUE_CLASS(c)                                                  \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_COLUMN_VALUE, ColumnValueClass))
#define IS_COLUMN_VALUE(obj)                                                   \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_COLUMN_VALUE))
#define IS_COLUMN_VALUE_CLASS(c)                                               \
  (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_COLUMN_VALUE))
#define COLUMN_VALUE_GET_CLASS(obj)                                            \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_COLUMN_VALUE, ColumnValueClass))

/* struct ColumnSchema */
struct _ColumnSchema {
  ThriftStruct parent;

  /* public */
  gchar *columnName;
  gboolean __isset_columnName;
  ColumnType columnType;
  gboolean __isset_columnType;
};
typedef struct _ColumnSchema ColumnSchema;

struct _ColumnSchemaClass {
  ThriftStructClass parent;
};
typedef struct _ColumnSchemaClass ColumnSchemaClass;

GType column_schema_get_type(void);
#define TYPE_COLUMN_SCHEMA (column_schema_get_type())
#define COLUMN_SCHEMA(obj)                                                     \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_COLUMN_SCHEMA, ColumnSchema))
#define COLUMN_SCHEMA_CLASS(c)                                                 \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_COLUMN_SCHEMA, ColumnSchemaClass))
#define IS_COLUMN_SCHEMA(obj)                                                  \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_COLUMN_SCHEMA))
#define IS_COLUMN_SCHEMA_CLASS(c)                                              \
  (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_COLUMN_SCHEMA))
#define COLUMN_SCHEMA_GET_CLASS(obj)                                           \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_COLUMN_SCHEMA, ColumnSchemaClass))

/* struct TableSchema */
struct _TableSchema {
  ThriftStruct parent;

  /* public */
  gchar *tableName;
  gboolean __isset_tableName;
  GPtrArray *columns;
  gboolean __isset_columns;
};
typedef struct _TableSchema TableSchema;

struct _TableSchemaClass {
  ThriftStructClass parent;
};
typedef struct _TableSchemaClass TableSchemaClass;

GType table_schema_get_type(void);
#define TYPE_TABLE_SCHEMA (table_schema_get_type())
#define TABLE_SCHEMA(obj)                                                      \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_TABLE_SCHEMA, TableSchema))
#define TABLE_SCHEMA_CLASS(c)                                                  \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_TABLE_SCHEMA, TableSchemaClass))
#define IS_TABLE_SCHEMA(obj)                                                   \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_TABLE_SCHEMA))
#define IS_TABLE_SCHEMA_CLASS(c)                                               \
  (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_TABLE_SCHEMA))
#define TABLE_SCHEMA_GET_CLASS(obj)                                            \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_TABLE_SCHEMA, TableSchemaClass))

/* struct ArithmethicOperator */
struct _ArithmethicOperator {
  ThriftStruct parent;

  /* public */
  ArithmethicOperatorValue operator;
  gboolean __isset_operator;
  ColumnType operandType;
  gboolean __isset_operandType;
};
typedef struct _ArithmethicOperator ArithmethicOperator;

struct _ArithmethicOperatorClass {
  ThriftStructClass parent;
};
typedef struct _ArithmethicOperatorClass ArithmethicOperatorClass;

GType arithmethic_operator_get_type(void);
#define TYPE_ARITHMETHIC_OPERATOR (arithmethic_operator_get_type())
#define ARITHMETHIC_OPERATOR(obj)                                              \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_ARITHMETHIC_OPERATOR,                \
                              ArithmethicOperator))
#define ARITHMETHIC_OPERATOR_CLASS(c)                                          \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_ARITHMETHIC_OPERATOR,                    \
                           ArithmethicOperatorClass))
#define IS_ARITHMETHIC_OPERATOR(obj)                                           \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_ARITHMETHIC_OPERATOR))
#define IS_ARITHMETHIC_OPERATOR_CLASS(c)                                       \
  (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_ARITHMETHIC_OPERATOR))
#define ARITHMETHIC_OPERATOR_GET_CLASS(obj)                                    \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_ARITHMETHIC_OPERATOR,                 \
                             ArithmethicOperatorClass))

/* struct ComparisonOperator */
struct _ComparisonOperator {
  ThriftStruct parent;

  /* public */
  ComparisonOperatorValue opereator;
  gboolean __isset_opereator;
  ColumnType opereandType;
  gboolean __isset_opereandType;
};
typedef struct _ComparisonOperator ComparisonOperator;

struct _ComparisonOperatorClass {
  ThriftStructClass parent;
};
typedef struct _ComparisonOperatorClass ComparisonOperatorClass;

GType comparison_operator_get_type(void);
#define TYPE_COMPARISON_OPERATOR (comparison_operator_get_type())
#define COMPARISON_OPERATOR(obj)                                               \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_COMPARISON_OPERATOR,                 \
                              ComparisonOperator))
#define COMPARISON_OPERATOR_CLASS(c)                                           \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_COMPARISON_OPERATOR,                     \
                           ComparisonOperatorClass))
#define IS_COMPARISON_OPERATOR(obj)                                            \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_COMPARISON_OPERATOR))
#define IS_COMPARISON_OPERATOR_CLASS(c)                                        \
  (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_COMPARISON_OPERATOR))
#define COMPARISON_OPERATOR_GET_CLASS(obj)                                     \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_COMPARISON_OPERATOR,                  \
                             ComparisonOperatorClass))

/* struct LogicalOperator */
struct _LogicalOperator {
  ThriftStruct parent;

  /* public */
  LogicalOperatorValue operator;
  gboolean __isset_operator;
};
typedef struct _LogicalOperator LogicalOperator;

struct _LogicalOperatorClass {
  ThriftStructClass parent;
};
typedef struct _LogicalOperatorClass LogicalOperatorClass;

GType logical_operator_get_type(void);
#define TYPE_LOGICAL_OPERATOR (logical_operator_get_type())
#define LOGICAL_OPERATOR(obj)                                                  \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_LOGICAL_OPERATOR, LogicalOperator))
#define LOGICAL_OPERATOR_CLASS(c)                                              \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_LOGICAL_OPERATOR, LogicalOperatorClass))
#define IS_LOGICAL_OPERATOR(obj)                                               \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_LOGICAL_OPERATOR))
#define IS_LOGICAL_OPERATOR_CLASS(c)                                           \
  (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_LOGICAL_OPERATOR))
#define LOGICAL_OPERATOR_GET_CLASS(obj)                                        \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_LOGICAL_OPERATOR,                     \
                             LogicalOperatorClass))

/* struct ExpressionOperator */
struct _ExpressionOperator {
  ThriftStruct parent;

  /* public */
  ArithmethicOperator *arithmethicOper;
  gboolean __isset_arithmethicOper;
  ComparisonOperator *compaarisonOper;
  gboolean __isset_compaarisonOper;
  LogicalOperator *logicalOper;
  gboolean __isset_logicalOper;
};
typedef struct _ExpressionOperator ExpressionOperator;

struct _ExpressionOperatorClass {
  ThriftStructClass parent;
};
typedef struct _ExpressionOperatorClass ExpressionOperatorClass;

GType expression_operator_get_type(void);
#define TYPE_EXPRESSION_OPERATOR (expression_operator_get_type())
#define EXPRESSION_OPERATOR(obj)                                               \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_EXPRESSION_OPERATOR,                 \
                              ExpressionOperator))
#define EXPRESSION_OPERATOR_CLASS(c)                                           \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_EXPRESSION_OPERATOR,                     \
                           ExpressionOperatorClass))
#define IS_EXPRESSION_OPERATOR(obj)                                            \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_EXPRESSION_OPERATOR))
#define IS_EXPRESSION_OPERATOR_CLASS(c)                                        \
  (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_EXPRESSION_OPERATOR))
#define EXPRESSION_OPERATOR_GET_CLASS(obj)                                     \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_EXPRESSION_OPERATOR,                  \
                             ExpressionOperatorClass))

/* struct LiteralExpr */
struct _LiteralExpr {
  ThriftStruct parent;

  /* public */
  ColumnValue *val;
  gboolean __isset_val;
  ColumnType columnType;
  gboolean __isset_columnType;
};
typedef struct _LiteralExpr LiteralExpr;

struct _LiteralExprClass {
  ThriftStructClass parent;
};
typedef struct _LiteralExprClass LiteralExprClass;

GType literal_expr_get_type(void);
#define TYPE_LITERAL_EXPR (literal_expr_get_type())
#define LITERAL_EXPR(obj)                                                      \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_LITERAL_EXPR, LiteralExpr))
#define LITERAL_EXPR_CLASS(c)                                                  \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_LITERAL_EXPR, LiteralExprClass))
#define IS_LITERAL_EXPR(obj)                                                   \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_LITERAL_EXPR))
#define IS_LITERAL_EXPR_CLASS(c)                                               \
  (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_LITERAL_EXPR))
#define LITERAL_EXPR_GET_CLASS(obj)                                            \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_LITERAL_EXPR, LiteralExprClass))

/* struct ColumnExpr */
struct _ColumnExpr {
  ThriftStruct parent;

  /* public */
  gchar *tableName;
  gboolean __isset_tableName;
  gchar *columnName;
  gboolean __isset_columnName;
  ColumnType columnType;
  gboolean __isset_columnType;
};
typedef struct _ColumnExpr ColumnExpr;

struct _ColumnExprClass {
  ThriftStructClass parent;
};
typedef struct _ColumnExprClass ColumnExprClass;

GType column_expr_get_type(void);
#define TYPE_COLUMN_EXPR (column_expr_get_type())
#define COLUMN_EXPR(obj)                                                       \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_COLUMN_EXPR, ColumnExpr))
#define COLUMN_EXPR_CLASS(c)                                                   \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_COLUMN_EXPR, ColumnExprClass))
#define IS_COLUMN_EXPR(obj)                                                    \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_COLUMN_EXPR))
#define IS_COLUMN_EXPR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_COLUMN_EXPR))
#define COLUMN_EXPR_GET_CLASS(obj)                                             \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_COLUMN_EXPR, ColumnExprClass))

/* struct Expression */
struct _Expression {
  ThriftStruct parent;

  /* public */
  LiteralExpr *literal;
  gboolean __isset_literal;
  ColumnExpr *column;
  gboolean __isset_column;
};
typedef struct _Expression Expression;

struct _ExpressionClass {
  ThriftStructClass parent;
};
typedef struct _ExpressionClass ExpressionClass;

GType expression_get_type(void);
#define TYPE_EXPRESSION (expression_get_type())
#define EXPRESSION(obj)                                                        \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_EXPRESSION, Expression))
#define EXPRESSION_CLASS(c)                                                    \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_EXPRESSION, ExpressionClass))
#define IS_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_EXPRESSION))
#define IS_EXPRESSION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_EXPRESSION))
#define EXPRESSION_GET_CLASS(obj)                                              \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_EXPRESSION, ExpressionClass))

/* struct Predicate */
struct _Predicate {
  ThriftStruct parent;

  /* public */
  Expression *expression;
  gboolean __isset_expression;
};
typedef struct _Predicate Predicate;

struct _PredicateClass {
  ThriftStructClass parent;
};
typedef struct _PredicateClass PredicateClass;

GType predicate_get_type(void);
#define TYPE_PREDICATE (predicate_get_type())
#define PREDICATE(obj)                                                         \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_PREDICATE, Predicate))
#define PREDICATE_CLASS(c)                                                     \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_PREDICATE, PredicateClass))
#define IS_PREDICATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_PREDICATE))
#define IS_PREDICATE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_PREDICATE))
#define PREDICATE_GET_CLASS(obj)                                               \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_PREDICATE, PredicateClass))

/* struct Join */
struct _Join {
  ThriftStruct parent;

  /* public */
  gchar *what;
  gboolean __isset_what;
  Predicate *on;
  gboolean __isset_on;
};
typedef struct _Join Join;

struct _JoinClass {
  ThriftStructClass parent;
};
typedef struct _JoinClass JoinClass;

GType join_get_type(void);
#define TYPE_JOIN (join_get_type())
#define JOIN(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_JOIN, Join))
#define JOIN_CLASS(c) (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_JOIN, JoinClass))
#define IS_JOIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_JOIN))
#define IS_JOIN_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_JOIN))
#define JOIN_GET_CLASS(obj)                                                    \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_JOIN, JoinClass))

/* struct Record */
struct _Record {
  ThriftStruct parent;

  /* public */
  GPtrArray *columnValues;
  gboolean __isset_columnValues;
};
typedef struct _Record Record;

struct _RecordClass {
  ThriftStructClass parent;
};
typedef struct _RecordClass RecordClass;

GType record_get_type(void);
#define TYPE_RECORD (record_get_type())
#define RECORD(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_RECORD, Record))
#define RECORD_CLASS(c)                                                        \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_RECORD, RecordClass))
#define IS_RECORD(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_RECORD))
#define IS_RECORD_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_RECORD))
#define RECORD_GET_CLASS(obj)                                                  \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_RECORD, RecordClass))

/* struct RecordGroup */
struct _RecordGroup {
  ThriftStruct parent;

  /* public */
  TableSchema *schema;
  gboolean __isset_schema;
  GPtrArray *records;
  gboolean __isset_records;
};
typedef struct _RecordGroup RecordGroup;

struct _RecordGroupClass {
  ThriftStructClass parent;
};
typedef struct _RecordGroupClass RecordGroupClass;

GType record_group_get_type(void);
#define TYPE_RECORD_GROUP (record_group_get_type())
#define RECORD_GROUP(obj)                                                      \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_RECORD_GROUP, RecordGroup))
#define RECORD_GROUP_CLASS(c)                                                  \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_RECORD_GROUP, RecordGroupClass))
#define IS_RECORD_GROUP(obj)                                                   \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_RECORD_GROUP))
#define IS_RECORD_GROUP_CLASS(c)                                               \
  (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_RECORD_GROUP))
#define RECORD_GROUP_GET_CLASS(obj)                                            \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_RECORD_GROUP, RecordGroupClass))

/* struct RecordUpdate */
struct _RecordUpdate {
  ThriftStruct parent;

  /* public */
  gchar *tableName;
  gboolean __isset_tableName;
  GPtrArray *columnSchemas;
  gboolean __isset_columnSchemas;
  GPtrArray *values;
  gboolean __isset_values;
};
typedef struct _RecordUpdate RecordUpdate;

struct _RecordUpdateClass {
  ThriftStructClass parent;
};
typedef struct _RecordUpdateClass RecordUpdateClass;

GType record_update_get_type(void);
#define TYPE_RECORD_UPDATE (record_update_get_type())
#define RECORD_UPDATE(obj)                                                     \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_RECORD_UPDATE, RecordUpdate))
#define RECORD_UPDATE_CLASS(c)                                                 \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_RECORD_UPDATE, RecordUpdateClass))
#define IS_RECORD_UPDATE(obj)                                                  \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_RECORD_UPDATE))
#define IS_RECORD_UPDATE_CLASS(c)                                              \
  (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_RECORD_UPDATE))
#define RECORD_UPDATE_GET_CLASS(obj)                                           \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_RECORD_UPDATE, RecordUpdateClass))

/* struct CreateTableStmt */
struct _CreateTableStmt {
  ThriftStruct parent;

  /* public */
  TableSchema *schema;
  gboolean __isset_schema;
};
typedef struct _CreateTableStmt CreateTableStmt;

struct _CreateTableStmtClass {
  ThriftStructClass parent;
};
typedef struct _CreateTableStmtClass CreateTableStmtClass;

GType create_table_stmt_get_type(void);
#define TYPE_CREATE_TABLE_STMT (create_table_stmt_get_type())
#define CREATE_TABLE_STMT(obj)                                                 \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_CREATE_TABLE_STMT, CreateTableStmt))
#define CREATE_TABLE_STMT_CLASS(c)                                             \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_CREATE_TABLE_STMT, CreateTableStmtClass))
#define IS_CREATE_TABLE_STMT(obj)                                              \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_CREATE_TABLE_STMT))
#define IS_CREATE_TABLE_STMT_CLASS(c)                                          \
  (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_CREATE_TABLE_STMT))
#define CREATE_TABLE_STMT_GET_CLASS(obj)                                       \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_CREATE_TABLE_STMT,                    \
                             CreateTableStmtClass))

/* struct DropTableStmt */
struct _DropTableStmt {
  ThriftStruct parent;

  /* public */
  gchar *tableName;
  gboolean __isset_tableName;
};
typedef struct _DropTableStmt DropTableStmt;

struct _DropTableStmtClass {
  ThriftStructClass parent;
};
typedef struct _DropTableStmtClass DropTableStmtClass;

GType drop_table_stmt_get_type(void);
#define TYPE_DROP_TABLE_STMT (drop_table_stmt_get_type())
#define DROP_TABLE_STMT(obj)                                                   \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_DROP_TABLE_STMT, DropTableStmt))
#define DROP_TABLE_STMT_CLASS(c)                                               \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_DROP_TABLE_STMT, DropTableStmtClass))
#define IS_DROP_TABLE_STMT(obj)                                                \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_DROP_TABLE_STMT))
#define IS_DROP_TABLE_STMT_CLASS(c)                                            \
  (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_DROP_TABLE_STMT))
#define DROP_TABLE_STMT_GET_CLASS(obj)                                         \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_DROP_TABLE_STMT, DropTableStmtClass))

/* struct QueryStmt */
struct _QueryStmt {
  ThriftStruct parent;

  /* public */
  gchar *fromTable;
  gboolean __isset_fromTable;
  Predicate *where;
  gboolean __isset_where;
  GPtrArray *joins;
  gboolean __isset_joins;
};
typedef struct _QueryStmt QueryStmt;

struct _QueryStmtClass {
  ThriftStructClass parent;
};
typedef struct _QueryStmtClass QueryStmtClass;

GType query_stmt_get_type(void);
#define TYPE_QUERY_STMT (query_stmt_get_type())
#define QUERY_STMT(obj)                                                        \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_QUERY_STMT, QueryStmt))
#define QUERY_STMT_CLASS(c)                                                    \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_QUERY_STMT, QueryStmtClass))
#define IS_QUERY_STMT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_QUERY_STMT))
#define IS_QUERY_STMT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_QUERY_STMT))
#define QUERY_STMT_GET_CLASS(obj)                                              \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_QUERY_STMT, QueryStmtClass))

/* struct InsertStmt */
struct _InsertStmt {
  ThriftStruct parent;

  /* public */
  gchar *into;
  gboolean __isset_into;
  RecordGroup *records;
  gboolean __isset_records;
};
typedef struct _InsertStmt InsertStmt;

struct _InsertStmtClass {
  ThriftStructClass parent;
};
typedef struct _InsertStmtClass InsertStmtClass;

GType insert_stmt_get_type(void);
#define TYPE_INSERT_STMT (insert_stmt_get_type())
#define INSERT_STMT(obj)                                                       \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_INSERT_STMT, InsertStmt))
#define INSERT_STMT_CLASS(c)                                                   \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_INSERT_STMT, InsertStmtClass))
#define IS_INSERT_STMT(obj)                                                    \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_INSERT_STMT))
#define IS_INSERT_STMT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_INSERT_STMT))
#define INSERT_STMT_GET_CLASS(obj)                                             \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_INSERT_STMT, InsertStmtClass))

/* struct UpdateStmt */
struct _UpdateStmt {
  ThriftStruct parent;

  /* public */
  gchar *what;
  gboolean __isset_what;
  RecordUpdate *setValues;
  gboolean __isset_setValues;
  Predicate *where;
  gboolean __isset_where;
};
typedef struct _UpdateStmt UpdateStmt;

struct _UpdateStmtClass {
  ThriftStructClass parent;
};
typedef struct _UpdateStmtClass UpdateStmtClass;

GType update_stmt_get_type(void);
#define TYPE_UPDATE_STMT (update_stmt_get_type())
#define UPDATE_STMT(obj)                                                       \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_UPDATE_STMT, UpdateStmt))
#define UPDATE_STMT_CLASS(c)                                                   \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_UPDATE_STMT, UpdateStmtClass))
#define IS_UPDATE_STMT(obj)                                                    \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_UPDATE_STMT))
#define IS_UPDATE_STMT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_UPDATE_STMT))
#define UPDATE_STMT_GET_CLASS(obj)                                             \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_UPDATE_STMT, UpdateStmtClass))

/* struct DeleteStmt */
struct _DeleteStmt {
  ThriftStruct parent;

  /* public */
  gchar *fromTable;
  gboolean __isset_fromTable;
  Predicate *where;
  gboolean __isset_where;
};
typedef struct _DeleteStmt DeleteStmt;

struct _DeleteStmtClass {
  ThriftStructClass parent;
};
typedef struct _DeleteStmtClass DeleteStmtClass;

GType delete_stmt_get_type(void);
#define TYPE_DELETE_STMT (delete_stmt_get_type())
#define DELETE_STMT(obj)                                                       \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_DELETE_STMT, DeleteStmt))
#define DELETE_STMT_CLASS(c)                                                   \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_DELETE_STMT, DeleteStmtClass))
#define IS_DELETE_STMT(obj)                                                    \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_DELETE_STMT))
#define IS_DELETE_STMT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_DELETE_STMT))
#define DELETE_STMT_GET_CLASS(obj)                                             \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_DELETE_STMT, DeleteStmtClass))

/* struct Statement */
struct _Statement {
  ThriftStruct parent;

  /* public */
  CreateTableStmt *createTableStmt;
  gboolean __isset_createTableStmt;
  DropTableStmt *dropTableStmt;
  gboolean __isset_dropTableStmt;
  QueryStmt *queryStmt;
  gboolean __isset_queryStmt;
  InsertStmt *insertStmt;
  gboolean __isset_insertStmt;
  UpdateStmt *updateStmt;
  gboolean __isset_updateStmt;
  DeleteStmt *deleteStmt;
  gboolean __isset_deleteStmt;
};
typedef struct _Statement Statement;

struct _StatementClass {
  ThriftStructClass parent;
};
typedef struct _StatementClass StatementClass;

GType statement_get_type(void);
#define TYPE_STATEMENT (statement_get_type())
#define STATEMENT(obj)                                                         \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_STATEMENT, Statement))
#define STATEMENT_CLASS(c)                                                     \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_STATEMENT, StatementClass))
#define IS_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_STATEMENT))
#define IS_STATEMENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_STATEMENT))
#define STATEMENT_GET_CLASS(obj)                                               \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_STATEMENT, StatementClass))

/* struct RecordView */
struct _RecordView {
  ThriftStruct parent;

  /* public */
  GPtrArray *records;
  gboolean __isset_records;
  GPtrArray *columns;
  gboolean __isset_columns;
};
typedef struct _RecordView RecordView;

struct _RecordViewClass {
  ThriftStructClass parent;
};
typedef struct _RecordViewClass RecordViewClass;

GType record_view_get_type(void);
#define TYPE_RECORD_VIEW (record_view_get_type())
#define RECORD_VIEW(obj)                                                       \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_RECORD_VIEW, RecordView))
#define RECORD_VIEW_CLASS(c)                                                   \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_RECORD_VIEW, RecordViewClass))
#define IS_RECORD_VIEW(obj)                                                    \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_RECORD_VIEW))
#define IS_RECORD_VIEW_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_RECORD_VIEW))
#define RECORD_VIEW_GET_CLASS(obj)                                             \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_RECORD_VIEW, RecordViewClass))

/* struct StatementResult */
struct _StatementResult {
  ThriftStruct parent;

  /* public */
  RecordView *view;
  gboolean __isset_view;
};
typedef struct _StatementResult StatementResult;

struct _StatementResultClass {
  ThriftStructClass parent;
};
typedef struct _StatementResultClass StatementResultClass;

GType statement_result_get_type(void);
#define TYPE_STATEMENT_RESULT (statement_result_get_type())
#define STATEMENT_RESULT(obj)                                                  \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_STATEMENT_RESULT, StatementResult))
#define STATEMENT_RESULT_CLASS(c)                                              \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_STATEMENT_RESULT, StatementResultClass))
#define IS_STATEMENT_RESULT(obj)                                               \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_STATEMENT_RESULT))
#define IS_STATEMENT_RESULT_CLASS(c)                                           \
  (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_STATEMENT_RESULT))
#define STATEMENT_RESULT_GET_CLASS(obj)                                        \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_STATEMENT_RESULT,                     \
                             StatementResultClass))

/* constants */

/* struct DatabaseServiceExecuteArgs */
struct _DatabaseServiceExecuteArgs {
  ThriftStruct parent;

  /* public */
  Statement *stmt;
  gboolean __isset_stmt;
};
typedef struct _DatabaseServiceExecuteArgs DatabaseServiceExecuteArgs;

struct _DatabaseServiceExecuteArgsClass {
  ThriftStructClass parent;
};
typedef struct _DatabaseServiceExecuteArgsClass DatabaseServiceExecuteArgsClass;

GType database_service_execute_args_get_type(void);
#define TYPE_DATABASE_SERVICE_EXECUTE_ARGS                                     \
  (database_service_execute_args_get_type())
#define DATABASE_SERVICE_EXECUTE_ARGS(obj)                                     \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_DATABASE_SERVICE_EXECUTE_ARGS,       \
                              DatabaseServiceExecuteArgs))
#define DATABASE_SERVICE_EXECUTE_ARGS_CLASS(c)                                 \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_DATABASE_SERVICE_EXECUTE_ARGS,           \
                           DatabaseServiceExecuteArgsClass))
#define IS_DATABASE_SERVICE_EXECUTE_ARGS(obj)                                  \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_DATABASE_SERVICE_EXECUTE_ARGS))
#define IS_DATABASE_SERVICE_EXECUTE_ARGS_CLASS(c)                              \
  (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_DATABASE_SERVICE_EXECUTE_ARGS))
#define DATABASE_SERVICE_EXECUTE_ARGS_GET_CLASS(obj)                           \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_DATABASE_SERVICE_EXECUTE_ARGS,        \
                             DatabaseServiceExecuteArgsClass))

/* struct DatabaseServiceExecuteResult */
struct _DatabaseServiceExecuteResult {
  ThriftStruct parent;

  /* public */
  StatementResult *success;
  gboolean __isset_success;
  Error *err;
  gboolean __isset_err;
};
typedef struct _DatabaseServiceExecuteResult DatabaseServiceExecuteResult;

struct _DatabaseServiceExecuteResultClass {
  ThriftStructClass parent;
};
typedef struct _DatabaseServiceExecuteResultClass
    DatabaseServiceExecuteResultClass;

GType database_service_execute_result_get_type(void);
#define TYPE_DATABASE_SERVICE_EXECUTE_RESULT                                   \
  (database_service_execute_result_get_type())
#define DATABASE_SERVICE_EXECUTE_RESULT(obj)                                   \
  (G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_DATABASE_SERVICE_EXECUTE_RESULT,     \
                              DatabaseServiceExecuteResult))
#define DATABASE_SERVICE_EXECUTE_RESULT_CLASS(c)                               \
  (G_TYPE_CHECK_CLASS_CAST((c), _TYPE_DATABASE_SERVICE_EXECUTE_RESULT,         \
                           DatabaseServiceExecuteResultClass))
#define IS_DATABASE_SERVICE_EXECUTE_RESULT(obj)                                \
  (G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_DATABASE_SERVICE_EXECUTE_RESULT))
#define IS_DATABASE_SERVICE_EXECUTE_RESULT_CLASS(c)                            \
  (G_TYPE_CHECK_CLASS_TYPE((c), TYPE_DATABASE_SERVICE_EXECUTE_RESULT))
#define DATABASE_SERVICE_EXECUTE_RESULT_GET_CLASS(obj)                         \
  (G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_DATABASE_SERVICE_EXECUTE_RESULT,      \
                             DatabaseServiceExecuteResultClass))

#endif /* SERVICE_TYPES_H */
